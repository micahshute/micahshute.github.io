---
layout: post
title:      "What drove me to pursue software development ( / about me)"
date:       2018-05-27 03:47:07 +0000
permalink:  what_drove_me_to_pursue_software_development_about_me
---


This is being written in respones to blog assignment due 28 May 2018 for Flatiron School

My history of occupational passions has been more or less standard for an average American male: the basic progression, beginning at 8 years old, being Scientist => CIA Agent => Navy SEAL => ??? => Electrical/Software Engineer. I have always envied the simplicity and tenacity those driven few with only one passion, like my wife, who wanted to be a Dentist beginning in middle school and who got her DMD just a few days ago. I also envied those less mainstream, like my older brother, whose timeline looked more like: Garbage Collector => Fireman => Classical Violinist. 

I’ll skip scientist and CIA agent for obvious reasons. It ended up that my Navy SEAL vision manifested around the time I was 16 -19 years old - significant because it was just in time for college applications. So, although my Mom made me apply to a bunch of other schools, the only one I cared about was the United States Naval Academy. I ended up getting accepted, with my congressional nomination from Joe Biden (back when he was my Delaware Senator), and showed up in 2008 with very solidified self-constructed ideas of what the Naval Academy was. Like many midshipmen, when my expectations differed from reality, I became disillusioned within the first year – with my time at the Academy, as well as being a SEAL, which led me to my ??? timeline phase. Having lost my initial motivation for attending, I figured I would do what most graduates do - be an officer on a ship. The week before submitting my "service selection" input, however, I learned that if I chose Submarines I could get a $15k bonus - if I passed an interview in Washington DC on calculus/physics/thermodynamics. On a whim, I decided to go for it, and I ended up graduating on track to be a Submarine Officer, which had its own set of disillusionments, but was also the catalyst to some of my most important self-realizations. My commitment time included 2 years learning the basics of Nuclear Engineering / Reactor Plant Operations, followed by 3 years of supervising nuclear reactor plant operations and driving a 18.7 ton warship underwater, fooling around in the Atlantic. The training required for this was intensive, and gave me a multitude of skills, but it also introduced to me something which significantly shaped my fundamental philosophy with regards to learning and engineering. Working in a mechanical and electrical contraption that can achieve amaing feats of engineering broke the abstraction barriers which up to that point I had always associated with any engineering concept. And that changed everything. 

A quick description of what I mean: first of all, abstractions are essential for progress, so I'm not saying that abstractions are fundamentally bad. But in school, it seemed to me like there was always a "black box" that either impaired my understanding or killed my motivation. When I was upstream of the black box abstraction (i.e. learning fundamentals with no use cases for them), I couldn't find the motivation to learn the concepts for retention past an exam. When I was downstream of the black box (i.e. learning a concept on top of an abstraction), I often found myself either getting sidetracked with questions about the inner workings of the assumptions we were working on top of, or not understanding a concept because I didn't fully understand the underlying principles. Seeing the submarine, however, where the smallest, simplest systems work together with advanced components to accomplish amazing tasks and it is all just right there in front of you (and you're in charge of it), my downstream abstraction was gone, and I had my motivation to learn about everything onboard. With a multitude of technical manuals at my disposal, I found that any upstream abstraction was broken if I was willing to do the reading. And once I started this practice, I found that I understood everything so much better now that I had dug into the fundamentals. I didn't have to memorize facts, I understood concepts.  

Everything snowballed from there. I started getting back into some of the things I did in college with a newfound vigor for learning - I bought an Arduino and a Raspberry Pi, and began making projects. I soon realized how much I didn't know, so I started taking Udemy courses and following classes on MIT OCW first on control systems, but moving slowly to electrical engineering and then specifically programming. When my Navy commitment time was over and I resigned my commission, I decided to try making an iPhone app as a smaller part of a larger project. I read Apple's Swift documentation - my first OOP language. And that’s when it happened. I became obsessed. I have never dived so deep into anything before – and the obsession didn't fade away, if anything I was intrigued more and more each day. I bought books on algorithms and design patterns. I found that there was no limit to the infrastructure you could create with a programming language. You can construct anything, and you can make interacting ecosystems of objects that perform complex tasks more and more elegantly the more you code. Like the technical manuals on the submarine, there are docs readily available for anything you want to learn. You can put a complex design together into a working model without owning a machine shop, without buying electronics for each project and stuffing op amps, resistors, and capacitors into a breadboard, and without having access to a laboratory. You don't have to know how to weld, solder, operate any machinery, etc. in order to construct a design pattern you have planned on paper. All you need is a laptop. And maybe a free account to some cloud services. 

Another aspect which I think is unique to coding and interesting to consider is a more abstract concept: the correlation between coding and the power of the spoken word. To be more precise, I would say that coding is most similar to exaggerated fantastical human creations which were conceived in response to the universal respect and awe of the power of the spoken word. To explain more clearly what I mean, let me begin by saying that I think almost every person has, to some degree, a respect for those with the ability to wield words beyond the skill of a normal individual – whether it is because they are entranced by the content as they listen, or they find in that person an intellectual sparring partner, or they are impressed by the enormous influence a skillful wordsmith can possess over an audience. Because of this communal human respect and amazement of the potential power of words, the theme is rampant in literature, from religion ([In the beginning was the Word.](https://en.wikipedia.org/wiki/John_1:1)) to legends and myths (i.e. those that can use the spoken word to command their surroundings - [Merlin](https://en.wikipedia.org/wiki/Merlin) was described as King Arthur’s mentor in literature since the 12th century, and similar characters are usually described as a [source of guidance and wisdom](https://en.wikipedia.org/wiki/Gandalf)). Coding is more similar to this concept than any other engineering practice – the power of creation and control of your environment is administered through the use of commanded phrases, only it is written instead of spoken.

Anyway...

Short answer: Software development allows one to have the ability to conceive and construct the most complex designs with the least amount of material, time spent on superfluous tasks, and monetary investment.

